MODULE Main;
REQUIRE Time, Authentication;

CLASS Reception 'Приходы';//создаем новый класс Приходная накладная

//описываем свойства класса Приходная накладная
number 'Номер' = DATA STRING[10] (Reception) NONULL ;
date 'Дата' = DATA DATE (Reception) NONULL ;
name 'Наименвание' = DATA STRING[50] (Reception) NONULL ;
quantity 'Количество' = DATA NUMERIC[10,3](Reception) NONULL ;
price 'Цена' = DATA NUMERIC[10,2](Reception)NONULL ;
userName 'Пользователь' = DATA STRING[50](Reception);
userDate 'Дата ввода' = DATA DATE (Reception);

//проверка на уникальность
unique = GROUP AGGR Reception o BY number(o),date(o),name(o);
//ограничение
CONSTRAINT quantity(Reception o) > 1000 OR quantity(o)<0 MESSAGE 'Недопустимое количество';
//простые события (автозаполнение даты)
WHEN SET(Reception o IS Reception) AND NOT userDate(o) DO userDate(o) <- currentDate();
//автозаполнение пользователя, который внес изменения
WHEN SET(Reception o IS Reception) AND NOT userName(o) DO userName(o) <- STRING[50](currentUserName());

FORM editReception 'Приход'
    OBJECTS r = Reception PANEL //операция panel - только одна запись
    PROPERTIES (r)number,date,name,quantity,price
    EDIT Reception OBJECT r
    ;


//назначаем форму для отображения и редактирования свойств класса 
FORM viewReception 'Приходы' //название формы и заголовок
    OBJECTS r = Reception //объект формы опция по умолчанию GRID
    PROPERTIES (r) READONLY number,date,name,quantity,price,userName,userDate //список свойств
    PROPERTIES (r) NEWSESSION NEW, EDIT ,DELETE //операторы работы с объектами (newsession означает, что действия будут производиться в новом окне)
;

//создаем пункт меню
NAVIGATOR {
    NEW FOLDER move 'Движение' WINDOW toolbar FIRST {
        //новый пункт горизонтального меню
        NEW FORM viewReception; //в качестве подпункта меню Заголовок формы
    }
}
//внутри программного кода создали 2 отдельных контейнера, каждый из которых будет отражать свою информацию. дополнительно для cntDoc установаили высоту в 60 px, это визуально отделило контейнеры на форме длуг от друга
DESIGN editReception{
    OBJECTS {
        NEW cntDoc{
            horizontal = TRUE ;//распределяем элементы слева направо и сверху вниз
            caption = 'Накладная';
            height = 60;
            MOVE PROPERTY (number(r));
            MOVE PROPERTY (date(r));
        }
        NEW cntRow{
            horizontal = FALSE ;
            caption = 'Строки накладной';
            MOVE PROPERTY (name(r));
            MOVE PROPERTY (quantity(r));
            MOVE PROPERTY (price(r));
        }
    }
}
CLASS Organization 'Организация';
name 'Организация' = DATA STRING[50](Organization)NONULL ;

FORM viewOrganization 'Организации'
    OBJECTS o = Organization
    PROPERTIES (o) READONLY name
    PROPERTIES (o) NEWSESSION NEW ,EDIT ,DELETE ;

FORM editOrganization 'Организация'
    OBJECTS o = Organization PANEL 
    PROPERTIES (o) name
    EDIT Organization OBJECT o;

//эта форма будет выводиться как справочник
FORM listOrganization 'Организации'
    OBJECTS o = Organization
    PROPERTIES (o) READONLY name
    LIST Organization OBJECT o;//использование блока LIST превращает форму в форму выбора значения - типичный случай вызова формы справочника. как и обычная форма, форма выбора значения может иметь любые блоки, в том числе, можно указать опции редактирования. в этом случае вызовется форма, для которой определен блок EDIT (для данного примера - это форма editOrganization)

NAVIGATOR {
    move{
        NEW FOLDER directory 'Справочники'{
            NEW FORM viewOrganization;
        }
    }
}
//доработки связанные с Reception
//===============================

//новое свойство - ссылка на организацию
organization = DATA Organization(Reception);
//новое свойство organization для класса Reception, воззвращающее объект класса Organization. если идет обращение к свойству напрямую или через композицию, будет вызываться форма выбора, связанная с классом возвращаемого значения данного свойства. при этом свойство получит ссылку на выбранное значение( форма выбора listOrganization, определенная для выбора позиции среди объектов класса Organization)

//композиция
organizationName 'Поставщик' (Reception o) = name(organization(o));
//использование композиции organizationName (композиция- это выражение одних свойсв через другие)
EXTEND FORM  viewReception
    PROPERTIES (r) READONLY organizationName AFTER date(r);
//использование extend form  с опцией after для формы viewReception, с помощью которой новое свойство organizationName вставили в нужную позицию отображения между датой накладной и наименованием товара
EXTEND FORM editReception
    PROPERTIES (r) organizationName;
DESIGN editReception{
    OBJECTS {
        NEW cntOrg AFTER cntDoc{
            horizontal = TRUE ;
            caption = 'Поставщик';
            height = 60;
            MOVE PROPERTY (organizationName(r)){caption = 'Фирма';}//заголовок свойства organizationName "поставщик" в дизайнере формы изменен на слово "фирма"
        }
    }
}

//доработки для использования статических объектов
CLASS OrganizationType 'Тип организации'{
    supplier 'Поставщик', customer 'Покупатель'
}
//класс OrganizationType включает в себя два статических объекта : supplier и customer
organizationType 'ID' = DATA OrganizationType (Organization) NONULL ;
organizationTypeName 'Тип организации'(Organization o) = staticCaption(organizationType(o));

EXTEND FORM viewOrganization
    PROPERTIES (o) READONLY organizationTypeName;

EXTEND FORM editOrganization
    PROPERTIES (o) organizationTypeName;

CONSTRAINT SETCHANGED(organization(Reception o)) AND 
    NOT organizationType(organization(o)) = OrganizationType.supplier
    CHECKED BY organization[Reception]
    MESSAGE 'Для приходной накладной организация должна быть поставщиком';
